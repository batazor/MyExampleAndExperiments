// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shortlink-org/shortlink/internal/services/link/domain/link/v1"
	v1 "github.com/shortlink-org/shortlink/internal/services/link/domain/link/v1"
	"github.com/shortlink-org/shortlink/internal/services/link/infrastructure/repository/crud/mysql/ent/link"
	"github.com/shortlink-org/shortlink/internal/services/link/infrastructure/repository/crud/mysql/ent/predicate"
)

// LinkUpdate is the builder for updating Link entities.
type LinkUpdate struct {
	config
	hooks    []Hook
	mutation *LinkMutation
}

// Where appends a list predicates to the LinkUpdate builder.
func (lu *LinkUpdate) Where(ps ...predicate.Link) *LinkUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetURL sets the "url" field.
func (lu *LinkUpdate) SetURL(s string) *LinkUpdate {
	lu.mutation.SetURL(s)
	return lu
}

// SetHash sets the "hash" field.
func (lu *LinkUpdate) SetHash(s string) *LinkUpdate {
	lu.mutation.SetHash(s)
	return lu
}

// SetDescribe sets the "describe" field.
func (lu *LinkUpdate) SetDescribe(s string) *LinkUpdate {
	lu.mutation.SetDescribe(s)
	return lu
}

// SetNillableDescribe sets the "describe" field if the given value is not nil.
func (lu *LinkUpdate) SetNillableDescribe(s *string) *LinkUpdate {
	if s != nil {
		lu.SetDescribe(*s)
	}
	return lu
}

// ClearDescribe clears the value of the "describe" field.
func (lu *LinkUpdate) ClearDescribe() *LinkUpdate {
	lu.mutation.ClearDescribe()
	return lu
}

// SetJSON sets the "json" field.
func (lu *LinkUpdate) SetJSON(v v1.Link) *LinkUpdate {
	lu.mutation.SetJSON(v)
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LinkUpdate) SetCreatedAt(t time.Time) *LinkUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LinkUpdate) SetUpdatedAt(t time.Time) *LinkUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// Mutation returns the LinkMutation object of the builder.
func (lu *LinkUpdate) Mutation() *LinkMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LinkUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LinkUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LinkUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LinkUpdate) check() error {
	if v, ok := lu.mutation.URL(); ok {
		if err := link.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Link.url": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Hash(); ok {
		if err := link.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Link.hash": %w`, err)}
		}
	}
	return nil
}

func (lu *LinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.URL(); ok {
		_spec.SetField(link.FieldURL, field.TypeString, value)
	}
	if value, ok := lu.mutation.Hash(); ok {
		_spec.SetField(link.FieldHash, field.TypeString, value)
	}
	if value, ok := lu.mutation.Describe(); ok {
		_spec.SetField(link.FieldDescribe, field.TypeString, value)
	}
	if lu.mutation.DescribeCleared() {
		_spec.ClearField(link.FieldDescribe, field.TypeString)
	}
	if value, ok := lu.mutation.JSON(); ok {
		_spec.SetField(link.FieldJSON, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(link.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(link.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LinkUpdateOne is the builder for updating a single Link entity.
type LinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinkMutation
}

// SetURL sets the "url" field.
func (luo *LinkUpdateOne) SetURL(s string) *LinkUpdateOne {
	luo.mutation.SetURL(s)
	return luo
}

// SetHash sets the "hash" field.
func (luo *LinkUpdateOne) SetHash(s string) *LinkUpdateOne {
	luo.mutation.SetHash(s)
	return luo
}

// SetDescribe sets the "describe" field.
func (luo *LinkUpdateOne) SetDescribe(s string) *LinkUpdateOne {
	luo.mutation.SetDescribe(s)
	return luo
}

// SetNillableDescribe sets the "describe" field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableDescribe(s *string) *LinkUpdateOne {
	if s != nil {
		luo.SetDescribe(*s)
	}
	return luo
}

// ClearDescribe clears the value of the "describe" field.
func (luo *LinkUpdateOne) ClearDescribe() *LinkUpdateOne {
	luo.mutation.ClearDescribe()
	return luo
}

// SetJSON sets the "json" field.
func (luo *LinkUpdateOne) SetJSON(v v1.Link) *LinkUpdateOne {
	luo.mutation.SetJSON(v)
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LinkUpdateOne) SetCreatedAt(t time.Time) *LinkUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LinkUpdateOne) SetUpdatedAt(t time.Time) *LinkUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// Mutation returns the LinkMutation object of the builder.
func (luo *LinkUpdateOne) Mutation() *LinkMutation {
	return luo.mutation
}

// Where appends a list predicates to the LinkUpdate builder.
func (luo *LinkUpdateOne) Where(ps ...predicate.Link) *LinkUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LinkUpdateOne) Select(field string, fields ...string) *LinkUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Link entity.
func (luo *LinkUpdateOne) Save(ctx context.Context) (*Link, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LinkUpdateOne) SaveX(ctx context.Context) *Link {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LinkUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LinkUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LinkUpdateOne) check() error {
	if v, ok := luo.mutation.URL(); ok {
		if err := link.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Link.url": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Hash(); ok {
		if err := link.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Link.hash": %w`, err)}
		}
	}
	return nil
}

func (luo *LinkUpdateOne) sqlSave(ctx context.Context) (_node *Link, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(link.Table, link.Columns, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Link.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, link.FieldID)
		for _, f := range fields {
			if !link.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != link.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.URL(); ok {
		_spec.SetField(link.FieldURL, field.TypeString, value)
	}
	if value, ok := luo.mutation.Hash(); ok {
		_spec.SetField(link.FieldHash, field.TypeString, value)
	}
	if value, ok := luo.mutation.Describe(); ok {
		_spec.SetField(link.FieldDescribe, field.TypeString, value)
	}
	if luo.mutation.DescribeCleared() {
		_spec.ClearField(link.FieldDescribe, field.TypeString)
	}
	if value, ok := luo.mutation.JSON(); ok {
		_spec.SetField(link.FieldJSON, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(link.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(link.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Link{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{link.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
